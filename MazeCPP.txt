#include "Maze.h"
#include "StateSpaceTree.h"
using namespace std;


Maze::Maze(int start[], int end[]) {
    this->start = start;
    this->end = end;
}

//Function to initiate search process
void Maze::findPath() {

    visit(start[0], start[1]);
    cout << "Tree \n";
    stateSpaceTree.display(stateSpaceTree.root);
    stateSpaceTree.display_tree(stateSpaceTree.root);
}

//Function to visit a cell and recursively make next move
void Maze::visit(int x, int y) {

    //Base Condition - Reached the destination cell
    if (x == end[0] && y == end[1]) {
        visited[x][y]=1;
        //Update hasPath to True (Maze has a possible path)
        hasPath = true;
        //Store the minimum of the path length
        if (length < shortLength)
            shortLength = length;
        displaypath();
        printPath(current_path);
        visited[x][y] = 0; // howa da hena kdea bykhle el destination zero wla el ablha ??
        //return (Backtrack) to explore more possible paths
        return;
    }

    //Mark the current cell as visited
    visited[x][y] = 1;
    //Increment the current path length by 1
    length++;

    stateSpaceTree.insert(x,y);
    current_path.push_back({ x, y });

    //Check for next move:
    //1.Right
    if (canVisit(x + 1, y)) {
        visit(x + 1, y);
    }

    //2.Down
    if (canVisit(x, y + 1)) {
        visit(x, y + 1);
    }

    //3.Left
    if (canVisit(x - 1, y)) {
        visit(x - 1, y);
    }

    //4.Up
    if (canVisit(x, y - 1)) {
        visit(x, y - 1);
    }

    //Backtrack by unvisiting the current cell and
    //decrementing the value of current path length
    visited[x][y] = 0;
    length--;

    current_path.pop_back();
    stateSpaceTree.movetoparent();
    
}

//Function checks if (x,y) is a vaid cell or not
bool Maze::canVisit(int x, int y) {
    //Number of Columns in Maze
    int m = sizeof(matrix[0]) / sizeof(matrix[0][0]);
    //Number of rows in Maze
    int n = sizeof(matrix) / sizeof(matrix[0]);
    //Check Boundaries
    if (x < 0 || y < 0 || x >= m || y >= n)
        return false;
    //Check 0 or already visited
    if (matrix[x][y] == 0 || visited[x][y] == 1)
        return false;
    return true;
}

void Maze:: printPath(vector<vector<int>> v)
{
    cout << "Path length: " << length <<endl;
    for (int i = 0; i < v.size(); i++)
    {
        cout << "(" << v[i][0] << "," << v[i][1] << ") ";
    }
    cout << endl << endl ;
}

void Maze::displaypath()
{
    for (int i = 0; i < N; i++)
    {
        for (int j = 0; j < N; j++)
        {
            cout << visited[i][j];
        }
        cout << endl;
    }
}

